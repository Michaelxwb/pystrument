ai_services: {}
analysis_templates:
  bottleneck_detection: '

    识别以下调用链路中的性能瓶颈：


    {function_call_tree}


    请分析：

    1. 哪些函数是主要的性能瓶颈

    2. 瓶颈的类型（数据库、计算、I/O等）

    3. 影响程度评估

    4. 优化优先级建议

    '
  optimization_suggestions: '

    基于以下性能数据，提供具体的优化建议：


    {performance_data}


    请提供：

    1. 数据库优化建议

    2. 代码算法优化

    3. 缓存策略建议

    4. 架构改进建议

    5. 预期的性能提升效果

    '
  performance_analysis: '

    请分析以下Python Web应用的性能数据：


    ## 基本信息

    - 请求路径: {request_path}

    - 请求方法: {request_method}

    - 响应状态: {status_code}

    - 框架: {framework}


    ## 性能指标

    - 总耗时: {total_duration}秒

    - CPU时间: {cpu_time}秒

    - 峰值内存: {memory_peak}MB

    - 函数调用数: {function_count}

    - 慢函数数量: {slow_function_count}


    ## 最慢的函数调用

    {slow_functions}


    请提供：

    1. 性能评分（0-100分）

    2. 主要性能瓶颈分析

    3. 具体的优化建议

    4. 潜在风险评估


    请以JSON格式返回结构化的分析结果。

    '
default_service: openai
