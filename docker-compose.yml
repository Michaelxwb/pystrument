version: '3.8'

services:
  # MongoDB数据库
  mongodb:
    image: mongo:7.0
    container_name: pystrument-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-admin123}
      MONGO_INITDB_DATABASE: pystrument
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - pystrument-network
    restart: unless-stopped
    command: mongod --auth

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: pystrument-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123} --appendonly yes
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - pystrument-network
    restart: unless-stopped

  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pystrument-backend
    environment:
      # 数据库配置
      - MONGODB_URL=mongodb://admin:${MONGODB_PASSWORD:-admin123}@mongodb:27017/pystrument?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      
      # 应用配置
      - DEBUG=${DEBUG:-false}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - API_VERSION=v1
      
      # AI服务配置
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AI_SERVICE_TIMEOUT=30
      
      # 监控配置
      - DEFAULT_SAMPLING_RATE=0.3
      - MAX_BATCH_SIZE=100
      - ASYNC_SEND_TIMEOUT=5
      
      # 安全配置
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://frontend:3000,http://localhost
      - MAX_REQUEST_SIZE=10485760
      
      # 日志配置
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FILE=/var/log/pystrument/app.log
      
      # Celery配置
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/2
    ports:
      - "8000:8000"
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./backend:/app
      - backend_logs:/var/log/pystrument
    networks:
      - pystrument-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery任务队列
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pystrument-celery
    command: celery -A app.tasks.ai_analysis.celery_app worker --loglevel=info --concurrency=2 -Q analysis,batch,maintenance,reports
    environment:
      # 数据库配置
      - MONGODB_URL=mongodb://admin:${MONGODB_PASSWORD:-admin123}@mongodb:27017/pystrument?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      
      # AI服务配置
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AI_SERVICE_TIMEOUT=30
      
      # Celery配置
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/2
      
      # 日志配置
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FILE=/var/log/pystrument/celery.log
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./backend:/app
      - celery_logs:/var/log/pystrument
    networks:
      - pystrument-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.tasks.ai_analysis inspect ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Celery监控 (可选)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pystrument-flower
    command: celery -A app.tasks flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/2
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery
    networks:
      - pystrument-network
    restart: unless-stopped
    profiles:
      - monitoring

  # 前端Web界面
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: pystrument-frontend
    ports:
      - "3000:80"
    environment:
      - VITE_API_BASE_URL=http://localhost:8000/api
      - VITE_WS_BASE_URL=ws://localhost:8000/ws
      - VITE_APP_TITLE=性能分析平台
      - VITE_APP_VERSION=1.0.0
    networks:
      - pystrument-network
    restart: unless-stopped
    depends_on:
      - backend

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: pystrument-nginx
    ports:
      - "9000:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - pystrument-network
    restart: unless-stopped

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  celery_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  pystrument-network:
    driver: bridge